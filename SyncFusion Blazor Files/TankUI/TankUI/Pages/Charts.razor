@page "/charter"
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Gantt
@using Syncfusion.Blazor.Charts


<div class="col-12" style="background-color:blueviolet; border-radius:10px; border-bottom:double; border-left:double; border-bottom-color:#51005E">
    <h2 style="padding-left:1%; font-weight:600; padding-right:1%; padding-top:1%; color:white; font-size:17px">DashBoard</h2>
</div>
<br />
<br />
<div class="row">
    <div class="col-12" style="background-color:limegreen; border-radius:10px; border-bottom:double; border-left:double; border-bottom-color:#21015B">
        <h2 style="padding-left:1%; font-weight:600; padding-right:1%; padding-top:1%; color:white; font-size:17px"> 1.PieChart of Tank and its Capacity </h2>
    </div>
<SfAccumulationChart Title=" Tank and its Capacity Statistics">
    <AccumulationChartSeriesCollection>
        <AccumulationChartSeries DataSource="@StatisticsDetails" XName="Tank" YName="Capacity"
                                 Name="Tank">
        </AccumulationChartSeries>
    </AccumulationChartSeriesCollection>

    <AccumulationChartLegendSettings Visible="true"></AccumulationChartLegendSettings>
</SfAccumulationChart>
   

<br />
<div id="ControlRegion">

        <div class="col-12" style="background-color:limegreen; border-radius:10px; border-bottom:double; border-left:double; border-bottom-color:#21015B">
        <h2 style="padding-left:1%; font-weight:600; padding-right:1%; padding-top:1%; color:white; font-size:17px"> 2. Operation Task Gantt Chart</h2>
  </div>
    <SfGantt DataSource="@TaskCollection" Height="450px" Width="900px" ProjectStartDate="@ProjectStart" ProjectEndDate="@ProjectEnd" AllowFiltering="true" EnableContextMenu="true"
             Toolbar="@(new List<string>() { "NextTimeSpan", "PrevTimeSpan", "Search", "Add", "Cancel", "Delete", "Edit", "Update", "ZoomIn","ZoomOut","ZoomToFit"  })">
        <GanttTaskFields Id="TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate"
                         Duration="Duration" Progress="Progress" Dependency="Predecessor" Child="SubTasks">
        </GanttTaskFields>
        <GanttEditSettings AllowEditing="true" AllowTaskbarEditing="true" AllowAdding="true" AllowDeleting="true" ShowDeleteConfirmDialog="true"></GanttEditSettings>
        <GanttSearchSettings Fields="@Searchfields"></GanttSearchSettings>
        <GanttHolidays>
            <GanttHoliday From="@HolidayFrom1" To="@HolidayTo1"></GanttHoliday>
            <GanttHoliday From="@HolidayFrom2" To="@HolidayTo2"></GanttHoliday>
        </GanttHolidays>
        <GanttEventMarkers>
            <GanttEventMarker Day="@EventDay1" Label="Project approval and kick-off"
                              CssClass="e-custom-event-marker"></GanttEventMarker>
        </GanttEventMarkers>
        <GanttTimelineSettings TimelineUnitSize="@DefaultUnitWidth">
            <GanttTopTierSettings Unit="@TopTierUnit" Count="@TopTierCount" Format="@TopTierFormat"></GanttTopTierSettings>
            <GanttBottomTierSettings Count="@BottomTierCount" Unit="@BottomTierUnit" Format="@BottomTierFormat"></GanttBottomTierSettings>
        </GanttTimelineSettings>
    </SfGantt>
    </div>
</div>
<br />

<br />
<style>
    .ulstyle {
        margin: 0px;
        padding-left: 20px;
        display: inline-block;
    }

    .list {
        float: left;
        line-height: 20px;
        margin: 10px;
        min-width: 200px;
    }
</style>
@code {

    public class Statistics
    {
        public string Tank { get; set; }
        public double Capacity { get; set; }
    }

    public List<Statistics> StatisticsDetails = new List<Statistics>
    {
        new Statistics { Tank = "Tank1", Capacity = 37 },
        new Statistics { Tank = "Tank2", Capacity = 17 },
        new Statistics { Tank = "Tank3", Capacity = 19 },
        new Statistics { Tank = "Tank4", Capacity = 4  },
        new Statistics { Tank = "Tank5", Capacity = 11 },
        new Statistics { Tank = "Tank6", Capacity = 12 },
    };
    public DateTime ProjectStart = new DateTime(2019, 4, 1);
    public DateTime ProjectEnd = new DateTime(2019, 5, 4);
    public DateTime EventDay1 = new DateTime(2019, 4, 17);
    public DateTime HolidayFrom1 = new DateTime(2019, 4, 11);
    public DateTime HolidayTo1 = new DateTime(2019, 4, 12);
    public DateTime HolidayFrom2 = new DateTime(2019, 4, 1);
    public DateTime HolidayTo2 = new DateTime(2019, 4, 1);
    public List<TaskData>? TaskCollection { get; set; }
    public int DefaultUnitWidth = 33;
    public int TopTierCount = 1;
    public int BottomTierCount = 1;
    TimelineViewMode TopTierUnit = TimelineViewMode.Week;
    TimelineViewMode BottomTierUnit = TimelineViewMode.Day;
    string TopTierFormat = "MMM dd, yyyy";
    string BottomTierFormat = "";
    public string[] Searchfields = new string[] { "TaskId", "TaskName", "StartDate", "EndDate", "Duration", "Progress", "Predecessor" };
    protected override void OnInitialized()
    {
        this.TaskCollection = GetTaskCollection();
    }
    public class TaskData
    {
        public int TaskId { get; set; }
        public string TaskName { get; set; } = string.Empty;
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public string Duration { get; set; } = string.Empty;
        public int Progress { get; set; }
        public string Predecessor { get; set; } = string.Empty;
        public List<TaskData>? SubTasks { get; set; }
    }
    public static List<TaskData> GetTaskCollection()
    {
        List<TaskData> Tasks = new List<TaskData>() {
        new TaskData() {
            TaskId = 1,
            TaskName = "Performing Intial checking of machine",
            StartDate = new DateTime(2019, 04, 02),
            EndDate = new DateTime(2019, 04, 21),
            SubTasks = (new List <TaskData> () {
                new TaskData() {
                    TaskId = 2,
                    TaskName = "Identify Site location",
                    StartDate = new DateTime(2019, 04, 02),
                    Duration = "0",
                    Progress = 30
                },
                new TaskData() {
                    TaskId = 3,
                    TaskName = "Perform Lab Parameter Checking",
                    StartDate = new DateTime(2019, 04, 02),
                    Duration = "4",
                    Predecessor = "2",
                },
                new TaskData() {
                    TaskId = 4,
                    TaskName = "Lab Parameter approval",
                    StartDate = new DateTime(2019, 04, 02),
                    Duration = "0",
                    Progress = 30,
                    Predecessor = "3"
                },
            })
        },
        new TaskData() {
            TaskId = 5,
            TaskName = "Washing",
            StartDate = new DateTime(2019, 04, 02),
            EndDate = new DateTime(2019, 04, 21),
            SubTasks = (new List <TaskData> () {
                new TaskData() {
                    TaskId = 6,
                    TaskName = "Assigning Batches",
                    StartDate = new DateTime(2019, 04, 04),
                    Duration = "3",
                    Progress = 30,
                    Predecessor = "4",
                },
                new TaskData() {
                    TaskId = 7,
                    TaskName = "List Soap materials",
                    StartDate = new DateTime(2019, 04, 04),
                    Duration = "3",
                    Predecessor = "6",
                },
                new TaskData() {
                    TaskId = 8,
                    TaskName = "Lab Parameter approval",
                    StartDate = new DateTime(2019, 04, 04),
                    Duration = "0",
                    Predecessor = "7",
                },
            })
        },
        new TaskData() {
            TaskId = 9,
            TaskName = "Drying",
            StartDate = new DateTime(2019, 04, 04),
            Duration = "1",
            Predecessor = "8",
            Progress = 30,
        },
        new TaskData() {
            TaskId = 10,
            TaskName = "Drying approval ",
            StartDate = new DateTime(2019, 04, 04),
            EndDate = new DateTime(2019, 04, 21),
            Duration = "0",
            Predecessor = "9",
        },
        new TaskData() {
            TaskId = 11,
            TaskName = "Ironing",
            StartDate = new DateTime(2019, 04, 04),
            EndDate = new DateTime(2019, 04, 21),
            SubTasks = (new List <TaskData> () {
                new TaskData() {
                    TaskId = 12,
                    TaskName = "Clear the building site",
                    StartDate = new DateTime(2019, 04, 04),
                    Duration = "2",
                    Progress = 30,
                    Predecessor = "9",
                },
                
            })
        },
        new TaskData() {
            TaskId = 14,
            TaskName = "Ordering to Material",
            StartDate = new DateTime(2019, 04, 04),
            EndDate = new DateTime(2019, 04, 21),
            SubTasks = (new List <TaskData> () {
                new TaskData() {
                    TaskId = 15,
                    TaskName = "Excavate for distribution",
                    StartDate = new DateTime(2019, 04, 04),
                    Duration = "3",
                    Progress = 30,
                    Predecessor = "13",
                }
            })
        }
    };
        return Tasks;
    }

   
}


